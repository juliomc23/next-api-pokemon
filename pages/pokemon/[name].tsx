import { GetStaticProps, GetStaticPaths, GetServerSideProps } from "next";
import Head from "next/head";
import Image from "next/image";
import FooterComponent from "../../components/Footer/FooterComponent";
import HeaderComponent from "../../components/Header/HeaderComponent";

import { useState, useEffect } from "react";

import {
  getFirstAbility,
  getSecondAbility,
} from "../../services/habilitiesFetch";

interface Pokemon {
  name: string;
  id: number;
  abilities: Array<Habilities>;
}

interface Habilities {
  ability: {
    name: string;
    url: string;
  };
}

export const getStaticPaths: GetStaticPaths = async () => {
  const req = await fetch("https://pokeapi.co/api/v2/pokemon");
  const res = await req.json();

  const paths = res.results.map((pokemon: Pokemon) => {
    return {
      params: { name: pokemon.name },
    };
  });

  return {
    paths: paths,
    fallback: false, // can also be true or 'blocking'
  };
};

export const getStaticProps: GetStaticProps = async (context) => {
  const pokemonName = context.params?.name;

  const req = await fetch(`https://pokeapi.co/api/v2/pokemon/${pokemonName}`);
  const res = await req.json();

  return {
    props: res,
  };
};

export default function PokemonName(props: Pokemon) {
  const id = props.id;

  const [firstAbility, setFirstAbility] = useState("");
  const [secondAbility, setSecondAbility] = useState("");

  useEffect(() => {
    getFirstAbility(props, setFirstAbility),
      getSecondAbility(props, setSecondAbility);
  }, [props]);

  return (
    <div>
      <Head>
        <title>Pokemon - {props.name}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <HeaderComponent />
        <div>
          <Image
            src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${id}.png`}
            alt="Front pokemon image"
            width={200}
            height={200}
          />
        </div>
        <article>
          <span>Abilities</span>
          <p>
            {props.abilities[0].ability.name} : {secondAbility}
          </p>
          <p>
            {props.abilities[1].ability.name} : {firstAbility}
          </p>
        </article>
        <FooterComponent />
      </main>
    </div>
  );
}
